{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Next Page Component": {
		"prefix": "npc next page component",
		"body": [
			"import React from \"react\";",
			"",
			"type Props = {",
			"  params: Promise<{ ${TM_DIRECTORY/(.*[\\\\/])?\\[?([^\\]]+)\\]?/$2/}: string }>;",
			"  searchParams: Promise<{",
			"    [key: string]: string | string[] | undefined;",
			"  }>;",
			"};",
			"",
			"export default async function Page(props: Props) {",
			"  const params = await props.params;",
			"  const searchParams = await props.searchParams;",
			"",
			"  return (",
			"    <div>",
			"      <h1>Page</h1>",
			"      <pre>Params: {JSON.stringify(params, null, 2)}</pre>",
			"      <pre>Search Params: {JSON.stringify(searchParams, null, 2)}</pre>",
			"      <footer>Footer content here</footer>",
			"    </div>",
			"  );",
			"}"
		],
		"description": "Composant React async avec params et searchParams"
	},
	"Next Client Component": {
		"prefix": "ncc next client component",
		"body": [
			"\"use client\";",
			"",
			"export type ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props = {};",
			"",
			"export function ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}({}: ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props) {",
			"  return <div>${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}</div>;",
			"}"
		],
		"description": "Snippet pour un composant React TSX avec le nom du dossier parent"
	},
	"Next Function Component": {
		"prefix": "nfc next function component",
		"body": [
			"type ${1:Component}Props ={$0};",
			"function ${1:Component}({}: ${1:Component}Props) {",
			"  return <div>${1:Component}</div>;",
			"}",
		],
		"description": "Snippet pour un composant React TSX avec le nom du dossier parent"
	},
	"Next Layout Component": {
		"prefix": "nlc next layout component",
		"body": [
			"import React from \"react\";",
			"",
			"type Props = {",
			"  params: Promise<Record<string, string>>;",
			"  searchParams: Promise<{",
			"    [key: string]: string | string[] | undefined;",
			"  }>;",
			"  children?: React.ReactNode;",
			"};",
			"",
			"export default async function Layout(props: Props) {",
			"  const params = await props.params;",
			"  const searchParams = await props.searchParams;",
			"",
			"  return (",
			"    <div>",
			"      <h1>Layout</h1>",
			"      <pre>Params: {JSON.stringify(params,null,2)}</pre>",
			"      <pre>Search Params: {JSON.stringify(searchParams,null,2)}</pre>",
			"      <div>Children: </div>",
			"      <div className=\"container mx-auto bg-muted/50\">",
			"        {props.children}",
			"      </div>",
			"      <footer>Footer content here</footer>",
			"    </div>",
			"  );",
			"}"
		]
	},
	"next hook client": {
		"prefix": "nhc next hook client",
		"body": [
			"\"use client\"",
			"",
			"export type ${TM_FILENAME_BASE}Props = {};",
			"",
			"export function ${TM_FILENAME_BASE}({}: ${TM_FILENAME_BASE}Props = {}) {",
			"",
			"}"
		]
	},
	"next hook prisma": {
		"prefix": "nhp next hook prisma",
		"body": [
			"\"use client\";",
			"",
			"import { usePrismaFetch } from \"@/lib/prisma/prismaHooks\";",
			"import { Prisma } from \"@prisma/client\";",
			"",
			"type ArgType = Prisma.${1:SiteFindManyArgs};",
			"",
			"export function ${TM_FILENAME_BASE}<T extends ArgType>(args?: T, deps?: any[]) {",
			"  return usePrismaFetch((prisma) => prisma.${0:site}.findMany(args), {",
			"    refreshDeps: deps,",
			"  });",
			"}",
		]
	},
	"atom": {
		"prefix": "atom",
		"body": [
			"export const atom${1:State} = atom(${0:0})",
		]
	},
}