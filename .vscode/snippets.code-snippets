{
    // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Next Page Component": {
        "prefix": "npc next page component",
        "body": [
            "import React from \"react\";",
            "",
            "type Props = {",
            "  params: Promise<{ ${TM_DIRECTORY/(.*[\\\\/])?\\[?([^\\]]+)\\]?/$2/}: string }>;",
            "  searchParams: Promise<{",
            "    [key: string]: string | string[] | undefined;",
            "  }>;",
            "};",
            "",
            "export default async function Page(props: Props) {",
            "  const params = await props.params;",
            "  const searchParams = await props.searchParams;",
            "",
            "  return (",
            "    <div>",
            "      <h1>Page</h1>",
            "      <pre>Params: {JSON.stringify(params, null, 2)}</pre>",
            "      <pre>Search Params: {JSON.stringify(searchParams, null, 2)}</pre>",
            "      <footer>Footer content here</footer>",
            "    </div>",
            "  );",
            "}",
        ],
        "description": "Composant React async avec params et searchParams",
    },
    "Next Client Component": {
        "prefix": "ncc next client component",
        "body": [
            "\"use client\";",
            "",
            "export type ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props = {};",
            "",
            "export function ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}({}: ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props) {",
            "  return <div>${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}</div>;",
            "}",
        ],
        "description": "Snippet pour un composant React TSX avec le nom du dossier parent",
    },
    "Next Function Component": {
        "prefix": "nfc next function component",
        "body": [
            "type ${1:Component}Props ={$0};",
            "function ${1:Component}({}: ${1:Component}Props) {",
            "  return <div>${1:Component}</div>;",
            "}",
        ],
        "description": "Snippet pour un composant React TSX avec le nom du dossier parent",
    },
    "Next Layout Component": {
        "prefix": "nlc next layout component",
        "body": [
            "import React from \"react\";",
            "",
            "type Props = {",
            "  params: Promise<Record<string, string>>;",
            "  searchParams: Promise<{",
            "    [key: string]: string | string[] | undefined;",
            "  }>;",
            "  children?: React.ReactNode;",
            "};",
            "",
            "export default async function Layout(props: Props) {",
            "  const params = await props.params;",
            "  const searchParams = await props.searchParams;",
            "",
            "  return (",
            "    <div>",
            "      <h1>Layout</h1>",
            "      <pre>Params: {JSON.stringify(params,null,2)}</pre>",
            "      <pre>Search Params: {JSON.stringify(searchParams,null,2)}</pre>",
            "      <div>Children: </div>",
            "      <div className=\"container mx-auto bg-muted/50\">",
            "        {props.children}",
            "      </div>",
            "      <footer>Footer content here</footer>",
            "    </div>",
            "  );",
            "}",
        ],
    },
    "next hook client": {
        "prefix": "nhc next hook client",
        "body": [
            "\"use client\"",
            "",
            "export type ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props = {};",
            "",
            "export function ${TM_FILENAME_BASE/(-)(.)/${2:/upcase}/g}({}: ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props = {}) {",
            "  ",
            "  return null;",
            "}",
        ],
    },
    "useState": {
        "prefix": "ust",
        "body": [
            "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${0:initialValue});",
        ],
        "description": "Snippet for useState hook",
    },
    "useEffect": {
        "prefix": "uef",
        "body": [
            "useEffect(() => {",
            "  ${0:// effect code here}",
            "}, [${1:dependencies}]);",
        ],
        "description": "Snippet for useEffect hook",
    },
	"useCallback": {
		"prefix": "ucb",
		"body": [
			"const ${1:callback} = useCallback(() => {",
			"  ${0:// callback code here}",
			"}, [${2:dependencies}]);",
		],
		"description": "Snippet for useCallback hook",
	},
	"useMemo": {
		"prefix": "ume",
		"body": [
			"const ${1:value} = useMemo(() => {",
			"  return ${0:// computed value};",
			"}, [${2:dependencies}]);",
		],
		"description": "Snippet for useMemo hook",
	},
	"useRef": {
		"prefix": "uref",
		"body": [
			"const ${1:ref} = useRef(${0:null});",
		],
		"description": "Snippet for useRef hook",
	},
	"useTransition":{
		"prefix": "utr",
		"body": [
			"const [is${1:Pending}, start${1/(.*)/${1:/capitalize}/}] = useTransition();",
		],
		"description": "Snippet for useTransition hook",
	},
}
